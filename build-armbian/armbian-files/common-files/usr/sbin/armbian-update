#!/bin/bash
#==================================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Rebuild Armbian
# https://github.com/ophub/amlogic-s9xxx-armbian
#
# Function: Armbian kernel update
# Copyright (C) 2021- https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-armbian
#
# Kernel download server: https://github.com/ophub/kernel/tree/main/pub
#
# Command: armbian-update
#
#========================================= Functions list =========================================
#
# error_msg          : Output error message
#
# check_depends      : Check dependencies
# get_textoffset     : Get kernel TEXT_OFFSET
# check_network      : Checking network
# init_var           : Initialize all variables
# query_version      : Query the latest kernel version
# download_kernel    : Download the kernel
# check_kernel       : Check kernel files list
# backup_kernel      : Backup current kernel
# update_kernel      : Update the kernel
# update_uboot       : Update the uboot
#
# sos_kernel         : Restore the kernel
#
# help_info          : Display help information
#
#===================================== Set default parameters =====================================
#
# Set current path
current_path="${PWD}"
# Set kernel backup directory
backup_path="/ddbr/backup"
# Set kernel rescue temporary directory
rescue_path="/ddbr/rescue"
# Set the release check file
ophub_release_file="/etc/ophub-release"
# Set default installation mainline u-boot (-m)
auto_mainline_uboot="no"

# Set font color
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
FINISH="[\033[93m FINISH \033[0m]"
WARNING="[\033[93m WARNING \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#==================================================================================================

# Encountered a serious error, abort the script execution
error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

# Check dependencies
check_depends() {
    echo -e "${STEPS} Start checking dependencies..."

    is_missing="0"
    necessary_packages=("subversion" "tar" "coreutils" "bsdextrautils" "jq")
    i="1"
    for package in ${necessary_packages[*]}; do
        [[ -n "$(dpkg -l | awk '{print $2}' | grep -w "^${package}$" 2>/dev/null)" ]] || is_missing="1"
        let i++
    done

    if [[ "${is_missing}" -eq "1" ]]; then
        echo -e "${INFO} Start installing dependencies..."
        sudo apt-get update
        sudo apt-get install -y ${necessary_packages[*]}
        [[ "${?}" -ne "0" ]] && error_msg "Dependency installation failed, stop updating."
    else
        echo -e "${INFO} Dependency check completed."
    fi

    sync && echo ""
}

# Checking network
check_network() {
    echo -e "${STEPS} Start checking network status..."

    # Download from Chinese mirrors, check the status of connecting to the Chinese network
    curl --connect-timeout 10 -s "myip.ipip.net" 2>/dev/null | grep -qo "中国" && cn_net="yes" || cn_net="no"

    # Download from github.com, check the status of connection to github.com
    curl --connect-timeout 10 -s "github.com" >/dev/null 2>&1 && github_net="yes" || github_net="no"
    [[ "${github_net}" == "yes" ]] || error_msg "Your network cannot access [ github.com ], unable to download the kernel."

    echo -e "${INFO} Network status is normal."

    sync && echo ""
}

# Get kernel TEXT_OFFSET, For u-boot.ext and u-boot.emmc
get_textoffset() {
    boot_tgz_file="${1}"
    vmlinuz_name="${2}"
    need_overload="yes"
    temp_dir="$(mktemp -d)"
    (
        cd ${temp_dir}
        tar -xzf "${boot_tgz_file}" "${vmlinuz_name}"
    )
    # With TEXT_OFFSET patch is [ 0108 ], without TEXT_OFFSET patch is [ 0000 ] and need to ues [ UBOOT_OVERLOAD ] file.
    [[ "$(hexdump -n 15 -x "${temp_dir}/${vmlinuz_name}" 2>/dev/null | head -n 1 | awk '{print $7}')" == "0108" ]] && need_overload="no"
}

# Initialize all variables
init_var() {
    echo -e "${STEPS} Start initializing parameters..."

    # Check release file
    [[ -f "${ophub_release_file}" ]] || error_msg "missing [ ${ophub_release_file} ] file."
    # Adjust parameter name
    sed -i "s|^KERNEL_BRANCH=|KERNEL_TAGS=|g" ${ophub_release_file}
    # Get values
    source "${ophub_release_file}"
    PLATFORM="${PLATFORM}"
    UBOOT_OVERLOAD="${UBOOT_OVERLOAD}"
    MAINLINE_UBOOT="${MAINLINE_UBOOT}"
    KERNEL_REPO="${KERNEL_REPO}"
    KERNEL_TAGS="${KERNEL_TAGS}"
    KERNEL_BACKUP="${KERNEL_BACKUP}"
    GITHUB_CDN="${GITHUB_CDN}"
    [[ -z "${PLATFORM}" ]] && error_msg "[ PLATFORM ] is missing, stop updating the kernel."

    # If it is followed by [ : ], it means that the option requires a parameter value
    get_all_ver="$(getopt "r:u:k:c:b:m:" "${@}")"

    while [[ -n "${1}" ]]; do
        case "${1}" in
        -r | --kernelRepository)
            if [[ -n "${2}" ]]; then
                KERNEL_REPO="${2}"
                shift
            else
                error_msg "Invalid -r parameter [ ${2} ]!"
            fi
            ;;
        -u | --kernel_Usage)
            if [[ -n "${2}" ]]; then
                kernel_usage="${2}"
                shift
            else
                error_msg "Invalid -u parameter [ ${2} ]!"
            fi
            ;;
        -k | --Kernel)
            if [[ -n "${2}" ]]; then
                inputs_kernel="${2}"
                shift
            else
                error_msg "Invalid -k parameter [ ${2} ]!"
            fi
            ;;
        -c | --cdn)
            if [[ -n "${2}" ]]; then
                GITHUB_CDN="${2}"
                shift
            else
                error_msg "Invalid -c parameter [ ${2} ]!"
            fi
            ;;
        -b | --Backup_kenlel)
            if [[ -n "${2}" ]]; then
                [[ "${2}" == "no" ]] && KERNEL_BACKUP="no" || KERNEL_BACKUP="yes"
                shift
            else
                error_msg "Invalid -b parameter [ ${2} ]!"
            fi
            ;;
        -m | --Mainline_u-boot)
            if [[ -n "${2}" ]]; then
                [[ "${2}" == "yes" ]] && auto_mainline_uboot="yes" || auto_mainline_uboot="no"
                shift
            else
                error_msg "Invalid -m parameter [ ${2} ]!"
            fi
            ;;
        *)
            error_msg "Invalid option [ ${1} ]!"
            ;;
        esac
        shift
    done

    # Complete URL
    [[ -n "${GITHUB_CDN}" && "${GITHUB_CDN:0-1}" != "/" ]] && GITHUB_CDN="${GITHUB_CDN}/"
    #[[ -z "${GITHUB_CDN}" && cn_net="yes" ]] && GITHUB_CDN="https://gh...xy.com/"

    # Adjust the custom kernel repository url format
    [[ -z "${KERNEL_REPO}" ]] && KERNEL_REPO="ophub/kernel"
    [[ "${KERNEL_REPO}" =~ ^https: ]] && KERNEL_REPO="$(echo ${KERNEL_REPO} | awk -F'/' '{print $4"/"$5}')"
    kernel_api="https://api.github.com/repos/${KERNEL_REPO}"

    # Set kernel download tags
    [[ -n "${kernel_usage}" ]] && KERNEL_TAGS="${kernel_usage}"
    KERNEL_TAGS="${KERNEL_TAGS//kernel_/}"
    [[ -z "$(echo ${KERNEL_TAGS} | grep -oE "(stable|rk3588|flippy|dev)")" ]] && KERNEL_TAGS="stable"

    # Display settings results
    echo -e "${INFO} Armbian platform: [ ${PLATFORM} ]"
    echo -e "${INFO} Kernel download repository: [ ${KERNEL_REPO} ]"
    echo -e "${INFO} Kernel download cdn: [ ${GITHUB_CDN} ]"
    echo -e "${INFO} Kernel tags: [ ${KERNEL_TAGS} ]"
    echo -e "${INFO} Kernel version: [ ${inputs_kernel} ]"

    # Find the partition where root is located
    ROOT_PTNAME="$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print $3}')"
    [[ -z "${ROOT_PTNAME}" ]] && error_msg "Failed to query system partition information."

    # Find the disk where the partition is located, only supports mmcblk?p? sd?? hd?? vd?? and other formats
    case "${ROOT_PTNAME}" in
    mmcblk?p[1-4])
        DISK_NAME="${ROOT_PTNAME:0:-2}"
        ;;
    [hsv]d[a-z][1-4])
        DISK_NAME="${ROOT_PTNAME:0:-1}"
        ;;
    nvme?n?p[1-4])
        DISK_NAME="${ROOT_PTNAME:0:-2}"
        ;;
    *)
        error_msg "Unrecognized disk type ${ROOT_PTNAME}!"
        ;;
    esac
    echo -e "${INFO} Armbian is running on: [ /dev/${DISK_NAME} ]"

    sync && echo ""
}

# Query the latest kernel version
query_version() {
    cd ${current_path}
    echo -e "${STEPS} Start querying kernel version..."

    # Query the current version
    current_kernel_signature="$(uname -r)"
    current_kernel="$(echo "$(uname -r)" | grep -oE '^[1-9].[0-9]{1,3}.[0-9]+')"
    [[ -z "${current_kernel}" ]] && error_msg "Failed to query the current kernel version."
    # kernel_verpatch, such as [ 5.10 ]
    kernel_verpatch="$(echo ${current_kernel} | awk -F '.' '{print $1"."$2}')"

    # Set the kernel path
    kernel_path="$(mktemp -d)"

    # The local kernel file is preferred, followed by the specified version, and finally the latest version of the same series is used
    try_tarfile="$(ls *.tar.gz -l 2>/dev/null | grep "^-" | wc -l)"
    try_boot="$(ls boot-*.tar.gz 2>/dev/null | head -n 1 | grep -oE '[1-9].[0-9]{1,3}.[0-9]+')"
    [[ "${try_tarfile}" -ge "4" && -n "${try_boot}" ]] && {
        # Use local kernel
        inputs_kernel="${try_boot}"
        echo -e "${INFO} Found the kernel in the current directory: [ ${inputs_kernel} ]"

        # Move the kernel to the temporary directory
        echo -e "${INFO} Move kernel files to temporary directory: [ ${kernel_path} ]"
        [[ -f "sha256sums" ]] && mv -f sha256sums -t ${kernel_path}
        mv -f *.tar.gz -t ${kernel_path}
        [[ "${?}" -ne "0" ]] && error_msg "Failed to move local kernel files to [ ${kernel_path} ] directory, stop updating."
    }

    # Query the latest kernel version
    [[ -z "${inputs_kernel}" ]] && {
        latest_version="$(
            curl -s -H "Accept: application/vnd.github+json" \
                ${kernel_api}/releases/tags/kernel_${KERNEL_TAGS} |
                jq -r '.assets[].name' |
                grep -oE "${kernel_verpatch}\.[0-9]+" |
                sort -rV | head -n 1
        )"
        [[ -n "${latest_version}" ]] || error_msg "Failed to query kernel version from [ ${kernel_api} ]."

        # Use the latest version
        inputs_kernel="${latest_version}"
    }

    echo -e "${INFO} Current version: [ ${current_kernel} ], Latest version: [ ${inputs_kernel} ]."
    # Kernel version comparison
    [[ "${current_kernel}" == "${inputs_kernel}" ]] && {
        echo -e "${FINISH} It's already the latest version, no need to update."
        exit 0
    }

    # Check for inapplicable kernels
    if [[ "${KERNEL_TAGS}" =~ ^[0-9]{1,2}\.[0-9]+ ]]; then
        [[ "${inputs_kernel}" != "$(echo ${KERNEL_TAGS} | sed -e 's/\.[xy]/\.1/g' | awk -F'.' '{print $1"."$2"."}')"* ]] && {
            error_msg "According to the [ ${ophub_release_file} ] file settings, the [ ${inputs_kernel} ] kernel is not available."
        }
    fi

    sync && echo ""
}

# Download the kernel
download_kernel() {
    cd ${current_path}
    echo -e "${STEPS} Start downloading kernel package..."

    # Download kernel
    if [[ "$(ls ${kernel_path}/*-${inputs_kernel}-*.tar.gz -l 2>/dev/null | grep "^-" | wc -l)" -lt "4" ]]; then
        # Download the kernel from [ releases ]
        kernel_down_from="${GITHUB_CDN}https://github.com/${KERNEL_REPO}/releases/download/kernel_${KERNEL_TAGS}/${inputs_kernel}.tar.gz"

        echo -e "${INFO} Download kernel from: [ ${kernel_down_from} ]"
        echo -e "${INFO} Download kernel to:   [ ${kernel_path} ]"
        wget "${kernel_down_from}" -q -P "${kernel_path}"
        [[ "${?}" -ne "0" ]] && error_msg "Failed to download kernel."
        tar -xf "${kernel_path}/${inputs_kernel}.tar.gz" -C "${kernel_path}"
        [[ "${?}" -ne "0" ]] && error_msg "Failed to extract kernel [ ${inputs_kernel} ], stop updating."
        kernel_path="${kernel_path}/${inputs_kernel}"
    else
        echo -e "${INFO} Using local kernel package: [ ${inputs_kernel} ]"
    fi

    sync && echo ""
}

# Check kernel files list
check_kernel() {
    cd ${kernel_path}
    echo -e "${STEPS} Start checking kernel package..."

    # Determine custom kernel filename
    kernel_boot="$(ls boot-${inputs_kernel}-*.tar.gz 2>/dev/null | head -n 1)"
    kernel_name="${kernel_boot:5:-7}"
    KERNEL_VERSION="$(echo ${kernel_name} | grep -oE '^[1-9].[0-9]{1,3}.[0-9]+')"
    [[ -z "${KERNEL_VERSION}" ]] && error_msg "Invalid kernel in [ ${kernel_path} ]"
    echo -e "${INFO} Kernel name: [ ${kernel_name} ]"

    # Check if the file is added with TEXT_OFFSET patch
    [[ "${PLATFORM}" == "amlogic" ]] && {
        get_textoffset "${kernel_path}/${kernel_boot}" "vmlinuz-${kernel_name}"
        echo -e "${INFO} Overload is required: [ ${need_overload} ]"
        if [[ "${need_overload}" == "yes" ]]; then
            [[ -n "${UBOOT_OVERLOAD}" && -f "/boot/${UBOOT_OVERLOAD}" ]] || error_msg "[ ${UBOOT_OVERLOAD} ] is missing, stop updating."
        fi
    }

    # Check the sha256sums file
    sha256sums_file="sha256sums"
    sha256sums_check="1"
    [[ -s "${sha256sums_file}" && -n "$(cat ${sha256sums_file})" ]] || sha256sums_check="0"
    # Loop check file
    [[ "${sha256sums_check}" -eq "1" ]] && {
        echo -e "${INFO} Start performing sha256sum verification..."

        kernel_list=("boot" "dtb-${PLATFORM}" "header" "modules")
        i="1"
        for kernel_file in ${kernel_list[*]}; do
            # Set check filename
            tmp_file="${kernel_file}-${kernel_name}.tar.gz"
            # Check if file exists
            [[ -s "${tmp_file}" ]] || error_msg "The [ ${kernel_file} ] file is missing."
            # Check if the file sha256sum is correct
            tmp_sha256sum="$(sha256sum "${tmp_file}" | awk '{print $1}')"
            tmp_checkcode="$(cat ${sha256sums_file} | grep ${tmp_file} | awk '{print $1}')"
            [[ "${tmp_sha256sum}" == "${tmp_checkcode}" ]] || error_msg "${tmp_file}: sha256sum verification failed."
            echo -e "${INFO} (${i}/4) Verification of [ ${tmp_file} ] succeeded."
            let i++
        done
    }

    sync && echo ""
}

# Backup current kernel
backup_kernel() {
    echo -e "${STEPS} Start backing up current kernel..."

    [[ -d "${backup_path}" ]] || mkdir -p ${backup_path}
    rm -rf ${backup_path}/${current_kernel}

    # Keep the latest 3 kernel backups and delete the others
    backup_kernel_list=($(ls ${backup_path} -lt | grep "^d" | awk '{print $9}'))
    [[ "${#backup_kernel_list[*]}" -ge "3" ]] && {
        for ((i = 2; i < ${#backup_kernel_list[*]}; i++)); do rm -rf ${backup_path}/${backup_kernel_list[$i]}; done
    }

    # Identify the current kernel files
    mkdir -p ${backup_path}/${current_kernel}

    # Create temporary file directory
    kernel_tmp_path="$(mktemp -d)"
    cd ${kernel_tmp_path}

    # 1. Pack the boot-*.tar.gz file
    rm -rf *
    cp -rf /boot/*-${current_kernel_signature} -t .
    [[ "${?}" -ne "0" ]] && error_msg "(1/4) Failed to copy [ /boot/*-${current_kernel_signature} ] files."
    rm -rf dtb*
    chmod +x *
    tar -czf boot-${current_kernel_signature}.tar.gz *
    mv -f *.tar.gz ${backup_path}/${current_kernel}
    [[ "${?}" -ne "0" ]] && error_msg "(1/4) Failed to move [ boot-${current_kernel_signature}.tar.gz ] files."
    echo -e "${INFO} (1/4) Backup of [ boot-${current_kernel_signature}.tar.gz ] succeeded."

    # 2. Pack the dtb-*.tar.gz file
    rm -rf *
    cp -rf /boot/dtb/${PLATFORM}/* -t .
    [[ "${?}" -ne "0" ]] && error_msg "(2/4) Failed to copy [ /boot/dtb/${PLATFORM}/* ] files."
    tar -czf dtb-${PLATFORM}-${current_kernel_signature}.tar.gz *
    mv -f *.tar.gz ${backup_path}/${current_kernel}
    [[ "${?}" -ne "0" ]] && error_msg "(2/4) Failed to move [ dtb-${PLATFORM}-${current_kernel_signature}.tar.gz ] files."
    echo -e "${INFO} (2/4) Backup of [ dtb-${PLATFORM}-${current_kernel_signature}.tar.gz ] succeeded."

    # 3. Pack the header-*.tar.gz file
    rm -rf *
    cp -rf /usr/src/linux-headers-${current_kernel_signature}/* -t .
    [[ "${?}" -ne "0" ]] && error_msg "(3/4) Failed to copy [ /usr/src/linux-headers-${current_kernel_signature}/* ] files."
    tar -czf header-${current_kernel_signature}.tar.gz *
    mv -f *.tar.gz ${backup_path}/${current_kernel}
    [[ "${?}" -ne "0" ]] && error_msg "(3/4) Failed to move [ header-${current_kernel_signature}.tar.gz ] files."
    echo -e "${INFO} (3/4) Backup of [ header-${current_kernel_signature}.tar.gz ] succeeded."

    # 4. Pack the modules-*.tar.gz file
    rm -rf *
    cp -rf /usr/lib/modules/${current_kernel_signature} -t .
    [[ "${?}" -ne "0" ]] && error_msg "(4/4) Failed to copy [ /usr/lib/modules/${current_kernel_signature} ] files."
    tar -czf modules-${current_kernel_signature}.tar.gz *
    mv -f *.tar.gz ${backup_path}/${current_kernel}
    [[ "${?}" -ne "0" ]] && error_msg "(4/4) Failed to move [ modules-${current_kernel_signature}.tar.gz ] files."
    echo -e "${INFO} (4/4) Backup of [ modules-${current_kernel_signature}.tar.gz ] succeeded."

    # Add sha256sum integrity verification file
    cd ${backup_path}/${current_kernel}
    sha256sum * >sha256sums
    echo -e "${INFO} [ sha256sums ] file has been generated."
    echo -e "${INFO} Current kernel backup path: [ ${backup_path}/${current_kernel} ]."

    sync && echo ""
}

# Update the kernel
update_kernel() {
    cd ${kernel_path}
    echo -e "${STEPS} Start unpacking kernel..."

    # Delete the current kernel files
    rm -f /boot/config-* /boot/initrd.img-* /boot/System.map-* /boot/uInitrd-* /boot/vmlinuz-*
    rm -rf /boot/uInitrd /boot/Image /boot/zImage /boot/dtb-*

    # 01. For /boot five files
    tar -xzf boot-${kernel_name}.tar.gz -C /boot
    [[ "${PLATFORM}" == "amlogic" ]] && (cd /boot && cp -f uInitrd-${kernel_name} uInitrd && cp -f vmlinuz-${kernel_name} zImage)
    [[ "${PLATFORM}" == "rockchip" ]] && (cd /boot && ln -sf uInitrd-${kernel_name} uInitrd && ln -sf vmlinuz-${kernel_name} Image)
    [[ "${PLATFORM}" == "allwinner" ]] && (cd /boot && cp -f uInitrd-${kernel_name} uInitrd && cp -f vmlinuz-${kernel_name} Image)
    [[ "$(ls /boot/*${kernel_name}* -l 2>/dev/null | grep "^-" | wc -l)" -ge "4" ]] || error_msg "The /boot files is missing."
    echo -e "${INFO} (1/4) Unpacking [ boot-${kernel_name}.tar.gz ] succeeded."

    # 02. For /boot/dtb/${PLATFORM}/*
    [[ -d "/boot/dtb/${PLATFORM}" ]] || mkdir -p /boot/dtb/${PLATFORM}
    tar -xzf dtb-${PLATFORM}-${kernel_name}.tar.gz -C /boot/dtb/${PLATFORM}
    [[ "${PLATFORM}" == "rockchip" ]] && ln -sf dtb /boot/dtb-${kernel_name}
    [[ "$(ls /boot/dtb/${PLATFORM} -l 2>/dev/null | grep "^-" | wc -l)" -ge "2" ]] || error_msg "/boot/dtb/${PLATFORM} files is missing."
    echo -e "${INFO} (2/4) Unpacking [ dtb-${PLATFORM}-${kernel_name}.tar.gz ] succeeded."

    # 03. For /usr/src/linux-headers-${kernel_name}
    header_path="linux-headers-${kernel_name}"
    rm -rf /usr/src/linux-headers-* && mkdir -p "/usr/src/${header_path}"
    tar -xzf header-${kernel_name}.tar.gz -C /usr/src/${header_path}
    [[ -d "/usr/src/${header_path}/include" ]] || error_msg "/usr/src/${header_path}/include folder is missing."
    echo -e "${INFO} (3/4) Unpacking [ header-${kernel_name}.tar.gz ] succeeded."

    # 04. For /usr/lib/modules/${kernel_name}
    rm -rf /usr/lib/modules/*
    tar -xzf modules-${kernel_name}.tar.gz -C /usr/lib/modules
    (cd /usr/lib/modules/${kernel_name}/ && rm -f build source && ln -sf /usr/src/${header_path} build)
    [[ -d "/usr/lib/modules/${kernel_name}" ]] || error_msg "/usr/lib/modules/${kernel_name} kernel folder is missing."
    echo -e "${INFO} (4/4) Unpacking [ modules-${kernel_name}.tar.gz ] succeeded."

    # Update release file
    sed -i "s|^KERNEL_VERSION=.*|KERNEL_VERSION='${KERNEL_VERSION}'|g" ${ophub_release_file}
    [[ "${auto_mainline_uboot}" == "yes" ]] && sed -i "s|^MLUBOOT_STATUS=.*|MLUBOOT_STATUS='yes'|g" ${ophub_release_file}

    # Delete kernel tmpfiles
    rm -f *${kernel_name}*.tar.gz sha256sums

    sync && echo ""
}

# Update the uboot
update_uboot() {
    echo -e "${STEPS} Start updating u-boot..."

    # Copy u-boot.ext and u-boot.emmc
    if [[ "${need_overload}" == "yes" && -n "${UBOOT_OVERLOAD}" && -f "/boot/${UBOOT_OVERLOAD}" ]]; then
        echo -e "${INFO} Copy u-boot: [ ${UBOOT_OVERLOAD} ]"
        run_on_emmc="$(lsblk -l -o NAME | grep -oE "^${DISK_NAME}boot0")"
        [[ ! -f "/boot/u-boot.ext" ]] && cp -f /boot/${UBOOT_OVERLOAD} /boot/u-boot.ext
        [[ ! -f "/boot/u-boot.emmc" && -n "${run_on_emmc}" ]] && cp -f /boot/u-boot.ext /boot/u-boot.emmc
        chmod +x /boot/u-boot.*
    fi

    # Write mainline u-boot
    if [[ "${auto_mainline_uboot}" == "yes" && -n "${MAINLINE_UBOOT}" && -f "${MAINLINE_UBOOT}" ]]; then
        echo -e "${INFO} Write Mainline u-boot: [ ${MAINLINE_UBOOT} ]"
        dd if="${MAINLINE_UBOOT}" of="/dev/${DISK_NAME}" conv=fsync bs=1 count=444 2>/dev/null
        dd if="${MAINLINE_UBOOT}" of="/dev/${DISK_NAME}" conv=fsync bs=512 skip=1 seek=1 2>/dev/null
    fi
    [[ "${?}" -ne "0" ]] && error_msg "Failed to write bootloader using [ dd ]."

    sync && echo ""
}

# Rescue the kernel
sos_kernel() {
    echo -e "${STEPS} Start rescuing kernel..."

    # Check the current system running disk
    root_devname="$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print substr($3, 1, length($3)-2)}')"
    if lsblk -l | grep -E "^${root_devname}boot0" >/dev/null; then
        error_msg "You are running in eMMC mode, please boot system with usb or tf card!"
    fi

    # Find emmc disk, first find emmc containing boot0 partition
    box_disk="$(lsblk -l -o NAME | grep -oE '(mmcblk[0-9]?boot0)' | sed "s/boot0//g")"
    # Find emmc disk, find emmc that does not contain the boot0 partition
    [[ -z "${box_disk}" ]] && box_disk="$(lsblk -l -o NAME | grep -oE '(mmcblk[0-9]?)' | grep -vE ^${root_devname} | sort | uniq)"
    # Find NVMe disk
    [[ -z "${box_disk}" ]] && box_disk="$(lsblk -l -o NAME | grep -oE '(nvme0n1)' | grep -vE ^${root_devname} | sort | uniq)"
    # Check if emmc exists
    [[ -z "${box_disk}" ]] && error_msg "The eMMC/NVMe storage not found in this device!"
    # Location of disk
    rescue_disk="/dev/${box_disk}"
    echo -e "${INFO} The device eMMC/NVMe name: [ ${rescue_disk} ]"

    # Check if there is enough free space
    available_space="$(df -Tk / | grep '/dev/' | awk '{print $5}' | echo $(($(xargs) / 1024 / 1024)))"
    [[ -z "$(echo "${available_space}" | sed -n "/^[0-9]\+$/p")" ]] && error_msg "The remaining space cannot be obtained."
    [[ "${available_space}" -lt "5" ]] && error_msg "The available space is less than 5GiB, please use [ armbian-tf ] to expand the USB."

    # Create a temporary mount directory
    rm -rf ${rescue_path}
    mkdir -p ${rescue_path}/{bootfs/,rootfs/}

    # Mount eMMC to USB
    mount ${rescue_disk}p1 ${rescue_path}/bootfs
    [[ "${?}" -ne "0" ]] && error_msg "mount ${rescue_disk}p1 failed!"
    mount ${rescue_disk}p2 ${rescue_path}/rootfs
    [[ "${?}" -ne "0" ]] && error_msg "mount ${rescue_disk}p2 failed!"

    # Identify the current kernel files
    kernel_signature="$(uname -r)"

    # 01. For /boot files
    cd ${rescue_path}/bootfs
    rm -rf config-* initrd.img-* System.map-* vmlinuz-* uInitrd* *Image dtb* u-boot.ext u-boot.emmc
    [[ "${PLATFORM}" == "amlogic" && -f "/boot/u-boot.ext" ]] && {
        cp -rf /boot/u-boot.ext -t .
        cp -rf /boot/u-boot.ext -t u-boot.emmc
        chmod +x u-boot.ext u-boot.emmc
    }
    cp -rf /boot/{*-${kernel_signature},uInitrd,*Image,dtb} -t .
    [[ "${?}" -ne "0" ]] && error_msg "(1/3) [ boot ] kernel files rescue failed."
    echo -e "${INFO} (1/3) [ boot ] kernel files rescue succeeded."

    # 02. For /usr/lib/modules/${kernel_signature}
    cd ${rescue_path}/rootfs/usr/lib/modules
    rm -rf *
    cp -rf /usr/lib/modules/${kernel_signature} -t .
    [[ "${?}" -ne "0" ]] && error_msg "(2/3) [ modules ] kernel files rescue failed."
    echo -e "${INFO} (2/3) [ modules ] kernel files rescue succeeded."

    # 03. For /usr/src/linux-headers-${kernel_signature}
    cd ${rescue_path}/rootfs/usr/src
    rm -rf linux-headers-*
    cp -rf /usr/src/linux-headers-${kernel_signature} -t .
    [[ "${?}" -ne "0" ]] && error_msg "(3/3) [ headers ] kernel files rescue failed."
    echo -e "${INFO} (3/3) [ headers ] kernel files rescue succeeded."

    # Unmount the emmc partition
    cd ${rescue_path}
    umount -f ${rescue_path}/bootfs
    [[ "${?}" -ne "0" ]] && error_msg "Failed to umount [ ${rescue_path}/bootfs ]"
    umount -f ${rescue_path}/rootfs
    [[ "${?}" -ne "0" ]] && error_msg "Failed to umount [ ${rescue_path}/rootfs ]"

    sync && echo ""
}

# Display help information
# prettytable (single_border_style): https://github.com/jazzband/prettytable/blob/main/src/prettytable/prettytable.py#L1358
help_info() {
    clear
    cat <<EOF
  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
  │  Example: armbian-update -k 5.15.50 -u dev                                                                          │
  ├───────────┬──────────────┬──────────────────────────┬───────────────────────────────────────────────────────────────┤
  │  Optional │ Default      │ Value                    │ Description                                                   │
  ├───────────┼──────────────┼──────────────────────────┼───────────────────────────────────────────────────────────────┤
  │  -r       │ ophub/kernel │ <owner>/<repo>           │ Set the repository for downloading kernels from github.com    │
  │  -u       │ automate     │ stable/rk3588/flippy/dev │ Set the tags suffix of the kernel used                        │
  │  -k       │ latest       │ kernel-version           │ Set the kernel version                                        │
  │  -c       │ None         │ domain-name              │ Set the cdn domain name for accelerated access to github.com  │
  │  -b       │ yes          │ yes/no                   │ Automatically backup the current system kernel                │
  │  -m       │ no           │ yes/no                   │ Use Mainline u-boot                                           │
  │  -s       │ None         │ None                     │ [SOS] Restore eMMC with system kernel from USB                │
  └───────────┴──────────────┴──────────────────────────┴───────────────────────────────────────────────────────────────┘
EOF
    exit 0
}

# Check script permission
[[ "$(id -u)" == "0" ]] || error_msg "Please run the script as root: [ sudo $0 ]"
echo -e "${STEPS} Welcome to the kernel update tool."

# Update or Rescue kernel
if [[ "${1}" == "-s" ]]; then
    # Start rescuing the kernel
    sos_kernel

    # Kernel rescue succeeded
    sync && sleep 3
    echo -e "${SUCCESS} Kernel rescue succeeded. Please remove the USB and restart the Armbian system."
elif [[ "${1}" == "-h" ]]; then
    # Display help information
    help_info
else
    # Start updating the kernel
    check_depends
    check_network
    init_var "${@}"
    query_version
    download_kernel
    check_kernel
    [[ "${KERNEL_BACKUP}" != "no" ]] && backup_kernel
    update_kernel
    [[ "${PLATFORM}" == "amlogic" ]] && update_uboot

    # Kernel updated successfully
    sync && sleep 3
    echo -e "${SUCCESS} Kernel update succeeded. Armbian system is restarting..."
    reboot
fi
