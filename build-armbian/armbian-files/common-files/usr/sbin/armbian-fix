#!/bin/bash
#======================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Rebuild Armbian
# https://github.com/ophub/amlogic-s9xxx-armbian
#
# Dependent script: /usr/lib/armbian/armbian-firstrun
# Function: Fix permissions and related settings(Executed at system initialization)
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-armbian
#
# Command: armbian-fix
#
#=============================== Set default parameters ===============================
#
# Set the armbian release check file
armbian_release_file="/etc/armbian-release"
# Set the ophub release check file
ophub_release_file="/etc/ophub-release"
# Custom armbian-fix Log
fix_log="/tmp/armbian-fix.log"
#
#======================================================================================

# Show start message
echo "[$(date +"%Y.%m.%d.%H:%M:%S")] armbian-fix: Start fixing..." >${fix_log}

# Start repairing system permissions
echo "[$(date +"%Y.%m.%d.%H:%M:%S")] armbian-fix: Start repairing system permissions..." >>${fix_log}

# Fix common releases permissions
[[ -d "/var/tmp" ]] && sudo chmod 777 /var/tmp && echo "01. Fix tmp permissions"
[[ -d "/etc/update-motd.d" ]] && sudo chmod 755 /etc/update-motd.d/* && echo "02. Fix update-motd.d permissions"
[[ -d "/var/cache/man" ]] && sudo chown man:root /var/cache/man -R && echo "03. Fix man permissions"
[[ -d "/var/cache/man" ]] && sudo chmod g+s /var/cache/man -R && echo "04. Fix man permissions"
[[ -f "/etc/sudoers" ]] && sudo chown root:root /etc/sudoers && echo "05. Fix man permissions"
[[ -f "/etc/sudoers" ]] && sudo chmod 440 /etc/sudoers && echo "06. Fix man permissions"
[[ -f "/usr/bin/sudo" ]] && sudo chown root:root /usr/bin/sudo && echo "07. Fix sudo permissions"
[[ -f "/usr/bin/sudo" ]] && sudo chmod 4755 /usr/bin/sudo && echo "08. Fix sudo permissions"
# Fix focal permissions
[[ -f "/usr/lib/sudo/sudoers.so" ]] && sudo chown 0 /usr/lib/sudo/sudoers.so && echo "09. Fix sudoers.so permissions"
[[ -f "/usr/lib/sudo/sudoers.so" ]] && sudo chmod 644 /usr/lib/sudo/sudoers.so && echo "10. Fix sudoers.so permissions"
[[ -f "/usr/lib/policykit-1/polkit-agent-helper-1" ]] && sudo chmod 4755 /usr/lib/policykit-1/polkit-agent-helper-1 && echo "11. Fix polkit-agent-helper-1 permissions"
# Fix jammy permissions
[[ -f "/usr/libexec/sudo/sudoers.so" ]] && sudo chown 0 /usr/libexec/sudo/sudoers.so && echo "12. Fix sudoers.so permissions"
[[ -f "/usr/libexec/sudo/sudoers.so" ]] && sudo chmod 644 /usr/libexec/sudo/sudoers.so && echo "13. Fix sudoers.so permissions"
[[ -f "/usr/libexec/polkit-agent-helper-1" ]] && sudo chmod 4755 /usr/libexec/polkit-agent-helper-1 && echo "14. Fix polkit-agent-helper-1 permissions"

# Start removing useless packages and scripts
echo "[$(date +"%Y.%m.%d.%H:%M:%S")] armbian-fix: Start removing useless packages and scripts..." >>${fix_log}

# Remove packages
sudo apt-get clean -y && sudo rm -rf /var/cache/apt/* && sudo rm -rf /var/lib/apt/* && echo "20. Clean up local installation packages"
[[ -n "$(dpkg -l | awk '{print $2}' | grep linux-image-*)" ]] && sudo apt-get remove -qq --purge -y linux-image-* && echo "21. Remove linux-image-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep linux-dtb-*)" ]] && sudo apt-get remove -qq --purge -y linux-dtb-* && echo "22. Remove linux-dtb-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep linux-u-boot-*)" ]] && sudo apt-get remove -qq --purge -y linux-u-boot-* && echo "23. Remove linux-u-boot-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep armbian-bsp-cli-*)" ]] && sudo apt-mark hold armbian-bsp-cli-* && echo "24. Hold armbian-bsp-cli-*"
[[ -n "$(dpkg -l | awk '{print $2}' | grep u-boot-tools)" ]] && sudo apt-mark hold u-boot-tools && echo "25. Hold u-boot-tools"
[[ -n "$(dpkg -l | awk '{print $2}' | grep sunxi-tools)" ]] && sudo apt-mark hold sunxi-tools && echo "26. Hold sunxi-tools"
[[ -n "$(dpkg -l | awk '{print $2}' | grep initramfs-tools*)" ]] && sudo apt-mark hold initramfs-tools* && echo "27. Hold initramfs-tools*"

# Remove the scripts contained in [ armbian-bsp-cli-odroidn2 ] that will cause the system to fail to start
# [ dpkg -S boot.cmd ] : [ armbian-bsp-cli-odroidn2: /usr/share/armbian/boot.cmd ]
# [ dpkg -c armbian-bsp-cli-odroidn2_23.02.2_arm64.deb ] : https://paste.armbian.com/aloxuvokol
backup_remove_files="/etc/backup_remove_files"
mkdir -p ${backup_remove_files}/{postrm.d/,postinst.d/,post-update.d/}
[[ -f "/etc/kernel/postrm.d/initramfs-tools" ]] && mv -f /etc/kernel/postrm.d/*initr* ${backup_remove_files}/postrm.d && echo "30. Remove postrm.d"
[[ -f "/etc/kernel/postinst.d/initramfs-tools" ]] && mv -f /etc/kernel/postinst.d/*initr* ${backup_remove_files}/postinst.d && echo "31. Remove postinst.d"
[[ -f "/etc/initramfs/post-update.d/99-uboot" ]] && mv -f /etc/initramfs/post-update.d/*uboot* ${backup_remove_files}/post-update.d && echo "32. Remove 99-uboot"
[[ -d "/usr/lib/nand-sata-install" ]] && mv -f /usr/lib/nand-sata-install ${backup_remove_files} && echo "33. Remove nand-sata-install"
[[ -d "/usr/share/armbian" ]] && mv -f /usr/share/armbian ${backup_remove_files} && echo "34. Remove armbian/boot.cmd"
update_initramfs_file="/usr/sbin/update-initramfs"
[[ -f "${update_initramfs_file}" ]] && sed -i "s|^update_initramfs=.*|update_initramfs=no|g" ${update_initramfs_file} && echo "35. Set update-initramfs"
update_initramfs_conf="/etc/initramfs-tools/update-initramfs.conf"
[[ -f "${update_initramfs_conf}" ]] && sed -i "s|^update_initramfs=.*|update_initramfs=no|g" ${update_initramfs_conf} && echo "36. Set update-initramfs.conf"

# Start disabling system services
echo "[$(date +"%Y.%m.%d.%H:%M:%S")] armbian-fix: Start disabling system services..." >>${fix_log}

# Regenerate new machine-id
sudo rm -f /etc/machine-id /var/lib/dbus/machine-id && echo "50. Delete machine-id"
sudo dbus-uuidgen --ensure=/etc/machine-id && echo "51. Generate /etc/machine-id"
sudo dbus-uuidgen --ensure && echo "52. Generate /var/lib/dbus/machine-id"

# Turn off automatic hibernation to prevent hard drives from hanging
sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target && echo "53. Turn off automatic sleep mode"

# Disable tips of the day for [ /etc/update-motd.d/35-armbian-tips ]
motd_tips="/etc/default/armbian-motd"
[[ -f "${motd_tips}" ]] && {
    sed -i 's|^MOTD_DISABLE=""|MOTD_DISABLE="tips"|g' ${motd_tips}
    echo "54. Disable tips of the day"
}
quotes_cron="/etc/cron.weekly/armbian-quotes"
[[ -f "${quotes_cron}" ]] && {
    sed -i "s|^curl |#curl |g" ${quotes_cron}
    echo "55. Disable quotes cron plan"
}

# Remove motd-news service
motd_timer="/usr/lib/systemd/system/motd-news.timer"
[[ -f "${motd_timer}" ]] && {
    sudo systemctl stop motd-news.timer
    sudo systemctl disable motd-news.timer
    sudo rm -f ${motd_timer}
    echo "56. Disable motd-news.timer"
}
motd_service="/usr/lib/systemd/system/motd-news.service"
[[ -f "${motd_service}" ]] && {
    sudo systemctl stop motd-news.service
    sudo systemctl disable motd-news.service
    sudo rm -f ${motd_service}
    echo "57. Disable motd-news.service"
}
sudo rm -f /var/lib/systemd/deb-systemd-helper-enabled/timers.target.wants/motd-news.timer
sudo rm -f /var/lib/systemd/deb-systemd-helper-enabled/motd-news.timer.dsh-also
sudo rm -f /etc/systemd/system/timers.target.wants/motd-news.timer
sudo rm -f /etc/update-motd.d/50-motd-news

# Start adjusting custom settings
echo "[$(date +"%Y.%m.%d.%H:%M:%S")] armbian-fix: Start adjusting custom settings..." >>${fix_log}

# Fix version differences(After 2022.12.03)
[[ -f "/etc/amlogic_model_database.conf" ]] && {
    mv -f /etc/amlogic_model_database.conf /etc/model_database.conf
    echo "70. Adjust the model_database.conf file name"
}
[[ -f "/etc/rockchip_model_database.conf" ]] && {
    mv -f /etc/rockchip_model_database.conf /etc/model_database.conf
    echo "71. Adjust the model_database.conf file name"
}

# Confirm device information
[[ -f "${ophub_release_file}" ]] && {
    # Get welcome banner value
    platform_name="$(cat ${ophub_release_file} | grep -E "^PLATFORM=" | cut -d"'" -f2)"
    soc_name="$(cat ${ophub_release_file} | grep -E "^SOC=" | cut -d"'" -f2 | sed -e "s|\b[a-z]|\U&|g")"
    board_name="$(cat ${ophub_release_file} | grep -E "^BOARD=" | cut -d"'" -f2 | sed -e "s|\b[a-z]|\U&|g")"

    # Adjust parameter name(After 2022.12.03)
    [[ -n "$(cat ${ophub_release_file} | grep -E "^ANDROID_UBOOT=")" ]] && {
        sed -i "s|ANDROID_UBOOT=|BOOTLOADER_IMG=|g" ${ophub_release_file}
        echo "80. Adjust the ANDROID_UBOOT name"
    }
    [[ -n "$(cat ${ophub_release_file} | grep -E "^UBOOT_STATUS=")" ]] && {
        sed -i "s|UBOOT_STATUS=|MLUBOOT_STATUS=|g" ${ophub_release_file}
        echo "81. Adjust the UBOOT_STATUS name"
    }
    [[ -n "$(cat ${ophub_release_file} | grep -E "^KERNEL_BRANCH=")" ]] || {
        [[ "${soc_name,,}" == "rk3588" ]] && KERNEL_BRANCH="rk3588" || KERNEL_BRANCH="stable"
        echo "KERNEL_BRANCH='${KERNEL_BRANCH}'" >>${ophub_release_file}
        echo "82. Add the KERNEL_BRANCH name"
    }

    # Fix custom banner name
    [[ "${platform_name}" == "amlogic" ]] && bd_name="Aml-${soc_name}"
    [[ "${platform_name}" == "rockchip" ]] && bd_name="RK-${board_name}"
    [[ "${platform_name}" == "allwinner" ]] && bd_name="AW-${board_name}"
    [[ -f "${armbian_release_file}" && -n "${bd_name}" ]] && {
        sed -i "s|BOARD_NAME=.*|BOARD_NAME=\"${bd_name}\"|g" ${armbian_release_file}
        echo "83. Fix custom board name: ${bd_name}"
    }

    # Disable ttyFIQ0 & ttyAML0 (ttyS2)
    [[ "${platform_name}" == "rockchip" ]] && {
        sudo systemctl disable serial-getty@ttyFIQ0 2>/dev/null
        sudo systemctl disable serial-getty@ttyAML0 2>/dev/null
        echo "84. Disable ttyFIQ0 & ttyAML0 (ttyS2)"
    }
}

# Show end message
echo "[$(date +"%Y.%m.%d.%H:%M:%S")] armbian-fix: successfully fixed." >>${fix_log}
